Install Docker:
	curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

	sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

	sudo apt-get update

        apt-get install -y docker-ce

Bash:

#!/bin/sh
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt-get update
apt-get install -y docker-ce

--------------------------Commands--------------------
## List Docker CLI commands
docker
docker container --help

## Display Docker version and info
docker --version
docker version
docker info

## Execute Docker image
docker run hello-world

## List Docker images
docker image ls

## List Docker containers (running, all, all in quiet mode)
docker container ls
docker container ls --all
docker container ls -aq

docker ps -> shows docker process and realted informatins
docker ps --all -> shows all created docker ps

docker build -t friendlyhello .  # Create image using this directory's Dockerfile
docker run -p 4000:80 friendlyhello  # Run "friendlyname" mapping port 4000 to 80
docker run -d -p 4000:80 friendlyhello         # Same thing, but in detached mode
docker container ls                                # List all running containers
docker container ls -a             # List all containers, even those not running
docker container stop <hash>           # Gracefully stop the specified container
docker container kill <hash>         # Force shutdown of the specified container
docker container rm <hash>        # Remove specified container from this machine
docker container rm $(docker container ls -a -q)         # Remove all containers
docker image ls -a                             # List all images on this machine
docker image rm <image id>            # Remove specified image from this machine
docker image rm $(docker image ls -a -q)   # Remove all images from this machine
docker login             # Log in this CLI session using your Docker credentials
docker tag <image> username/repository:tag  # Tag <image> for upload to registry
docker push username/repository:tag            # Upload tagged image to registry
docker run username/repository:tag                   # Run image from a registry

-------------------------------------Docker_file------------------------------------------
FROM: It defines the base image to use
RUN: **It is used to build the image, it run shall commands in order to build image
CMD: Unlike RUN it is not executed during buil, it is executed in the rund time of the container. When 
	image is build and container runs as a process it executes cmd commands. They are also shall commands
ENTRYPOINT: determines the start point of first cmd command.
ADD: gets two argument: a source and a destination. It basicallu copies the files from the source on the host into the container's own filesystem at the set destination.
ENV: used to set environment variables
WORKDIR: to set directory where cmd will be executed ***it is directory inside container file system
EXPOSE: used to associate a specified port to enable networking between the running process inside the container the outside workd
VOLUME: 


-------------------------------------Entrypoint & CMD---------------------------------
when we run container which is already build, it runs CMD or ENTRYPOINT in runtume of the container depending on the Dockerfile.
***If we want to give argument on console to "docker run <container>" we have to use ENTRYPOINT, ENTRYPOINT get that arguments and executes it it's command.
EX: Dockerfile->

FROM ubuntu:16.04
ENTRYPOINT ["echo"]
CMD ["Hi DEocker"]

1th option -> if we don't give any argument on console it will use CMD as defualt argument.
	docker run <container> -> Hi Docker
2th option -> If we give argument on the console, the consle arguent will have the priority 
	docker run <container> Hello python -> Hello python

*** No matter how much CMD you have, docker only run the last one so you can't create like Jenkins way execution run.

** If you have only CMD but you provide argument on command line, CMD part will be ignored as example below:
FROM ubuntu:16.04
CMD ["Hi DEocker"]
docker run <container> Hello python 
------------------------------------Training--------------------------
-----------------------------Section 2 (Containers with Docker client)---------------------------------------
- overwritting default  commands: docker run <image name> command
	when you just run image you bsaically put rhe snapshot of the docker prpgram to the hard drive of the compuetr. So in this stage it is just a program on file system shape. In order to run the progrem you need to create process which is initiated buy commands. Default command is in your docker file, but if you provide command in docker run CLI, yo uare overwriting default command so basically the command in the docker file wont be executed. 	

- docker system prune -> deletes any containers and containers releated procedess deleted so far

- 
"docker create" adds a writeable container on top of your image and sets it up for running whatever command you specified in your CMD. The container ID is reported back but itâ€™s not started.
	docker create creates a container number

"docker start <container number created from docker create>" will start any stopped containers. This includes freshly created containers.

"docker run" is a combination of create and start. It creates the container and starts it.

***If you create a container by docker crate with some command, you can't change that command any more for other docker starts. You need to recreate that container with new command. For docker run you can each time change the command. If youy are using same docker container over and over and there is no need to build it each time because it is waste time. Create&start  way in this case better becase we are reusing already crerated container. In docker run w ehave to create the container each time.

"docker restart" to restart alreadt created containe
r

- Logging-> "docker logs"
	https://docs.docker.com/engine/reference/commandline/logs/

- To stop running container on background ->
	"docker stop <container ID>" -> sigterm -> it stops the process and provides time zone for teardown stuff
	"docker kill <container ID>" -> sigkill -> kills the process imediately

- Executing commnads in Running container -> docker exec -it <container ID> <command>
		-it= input (stdin of running container process)
 
-- ************ if you dont want write docker exec all the time, you can open a shell and have terminall access in your running docer -> "docker exec -it <container ID> sh" *************************************
 	sh -> bash command processor, it is linux program that allwos you tou have termina laccess
 	type exit to go out
- You can use that termianl access also with "docker run" -> docker -run -it <container name> sh

- Container isolation-> In default, containers don't have default communication system

---------------------------------Section 3()Docker FIle stuff------------------------------------

docker build -> executes FROM. RUN steps in docker file
docker CMD -> executes CMD point since our program is ready to go in docker container file system

**Every step in dockerfile creates a temporary container within docker build process, if you build second or more time the container, temporary containers will be obtained from cache. For exampe, if  you have FROM Ubuntu in your docker file but you chanegd the rest of trhe content of docker file, when you re build the temporary container which was build for "from ubuntu" instruction will be obained from cache.

- Docker commit -> when you run container and u[date something with in the running container, you can create a new image from updated container content
	docker commit -c 'CMD ["connad"]' <container ID>
		-c -> to provide default command

-------------------------Section 5 (Docker Compose with Multiple Local Containers)----------------

- Docker Compose: Used to start-up multiple Docker containers at the same time. Automates some of the long-winded arguments we were passing to 'docker run'

- Commands: it wil automatically look for docker-compose.yml
	docker run myimage -> docker-compose up
	docker build . && docker run myimage -> docker-compose up --build

	stop containers -> docker-compose down

	if one container crash on compose, you can configure it to restart in yaml

	list the process -> docker-compose ps

	**when you add somethign to services colmun, it will create new container services

-------------------------Section 6 -------------------

VOLUME:
	When you have project and you work on source code. You dont want to build all the time your docker file when you change your source code. That's why you cna use volume feature. WHen you use voluems data is real time between hosting PC and container

-> Build the image
	docker run -p port:port -v source_dir:dest_dir_in_container_fileSystem <image ID>

if you have some folder that you dont want to be mapped
	docker run -p port:port -v <name and path of the folder to be excluded> -v source_dir:dest_dir_in_container_fileSystem <image ID>

second solution is to use VOLUME keyword in either docker file or docker composer

- Multi Step Builds ->
	in same docker file yoy can have 2 build step, every build step phase starts with FROM keyword. However till last phase you have to define phase name like: FROM ubuntu as phase1, you don't ned to spesify for last phase